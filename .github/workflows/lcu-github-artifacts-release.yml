name: o-biotech/public-web-about

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [plasmic]  
  workflow_dispatch:

permissions: write-all

env:
  CI: false
  Branches: main
  MainBranch: main
  NPMRegistry: https://registry.npmjs.org/
  InstallCommand: npm i
  BuildCommand: npm run build
  Output: ./public

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      # Set variables
      - name: Set variables
        id: vars
        run: |
          branch=${GITHUB_REF##*/}

          echo "::set-output name=branchName::$branch"
           
          if [ "$branch" == "${{ env.MainBranch }}" ]; then
              echo "::set-output name=versionBump::minor"
          else
              echo "::set-output name=versionBump::patch"
          fi

      - run: |
          echo "Set Variable Checks ${{ github.ref }}"
          echo "Current branch is ${{ steps.vars.outputs.branchName }}"
          echo "Version bump type is ${{ steps.vars.outputs.versionBump }}"

      # Bump version
      - name: Bump version
        uses: fathym/github-tag-action@master
        id: versionBump
        env:
          DEFAULT_BUMP: ${{ steps.vars.outputs.versionBump }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: .*
          WITH_V: false
          DRY_RUN: true
      - run: echo "New version is ${{ steps.versionBump.outputs.new_tag }}"

      # Check package.json existence
      - name: Check package.json existence
        id: package_json_exists
        uses: fathym/file-existence-action@master
        with:
          files: 'package.json'

      # Replace version text for main branch
      - name: replace version text for main branch
        if: ${{ steps.vars.outputs.branchName == env.MainBranch && steps.package_json_exists.outputs.files_exists == 'true' }}
        shell: pwsh
        run: (Get-Content -path package.json -Raw) -replace "version patch","version ${{ steps.versionBump.outputs.new_tag }} --no-git-tag-version -f" | Set-Content -Path package.json

      # Replace tag text for dev branches
      - name: replace tag text for dev branches
        if: ${{ steps.vars.outputs.branchName != env.MainBranch && steps.package_json_exists.outputs.files_exists == 'true' }}
        shell: pwsh
        run: (Get-Content -path package.json -Raw) -replace "--access public","--access public --tag ${{ steps.vars.outputs.branchName }}" | Set-Content -Path package.json

      - name: replace version text for dev branches
        if: ${{ steps.vars.outputs.branchName != env.MainBranch && steps.package_json_exists.outputs.files_exists == 'true' }}
        shell: pwsh
        run: (Get-Content -path package.json -Raw) -replace "version patch","version ${{ steps.versionBump.outputs.new_tag }}-${{ steps.vars.outputs.branchName }} --no-git-tag-version -f" | Set-Content -Path package.json

      # Run npm commands
      - uses: actions/setup-node@v2
        if: ${{ (!!env.InstallCommand || !!env.BuildCommand) && steps.package_json_exists.outputs.files_exists == 'true' }}
        with:
          node-version: '*'
          registry-url: ${{ env.NPMRegistry }}

      # Install npm dependencies
      - name: npm install
        if: ${{ !!env.InstallCommand && steps.package_json_exists.outputs.files_exists == 'true' }}
        run: ${{ env.InstallCommand }}

      # Build npm
      - name: npm build
        if: ${{ !!env.BuildCommand && steps.package_json_exists.outputs.files_exists == 'true' }}
        run: ${{ env.BuildCommand }}

      # Bump version and push tag
      - name: Bump version and push tag
        uses: fathym/github-tag-action@master
        id: versionBumpTag
        env:
          DEFAULT_BUMP: ${{ steps.vars.outputs.versionBump }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: .*
          WITH_V: false
          DRY_RUN: false
      - run: echo "New version is ${{ steps.versionBump.outputs.new_tag }}"
      - run: echo '${{ toJson(github.event) }}'

      # Upload versioned artifact to GitHub Artifacts
      - name: Upload versioned artifact to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.organization.login }}-${{ github.event.repository.name }}-${{ steps.versionBump.outputs.new_tag }}
          path: ${{ env.Output }}
          retention-days: 30

      # Download versioned artifact before uploading to Azure Blob Storage
      - name: Download versioned artifact for Azure Blob Storage
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.organization.login }}-${{ github.event.repository.name }}-${{ steps.versionBump.outputs.new_tag }}
          path: ./artifacts/versioned

      # Upload versioned artifact to Azure Blob Storage
      - name: Upload versioned artifact to Azure Blob Storage
        uses: fixpoint/azblob-upload-artifact@v4
        with:
          connection-string: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          container: deployments
          name: ${{ github.event.organization.login }}/${{ github.event.repository.name }}/${{ steps.versionBump.outputs.new_tag }}
          path: ./artifacts/versioned

      # Upload latest artifact to Azure Blob Storage
      - name: Upload latest artifact to Azure Blob Storage
        uses: fixpoint/azblob-upload-artifact@v4
        with:
          connection-string: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          container: deployments
          name: ${{ github.event.organization.login }}/${{ github.event.repository.name }}/latest
          path: ./artifacts/versioned

      # Webhook to LowCodeUnit
      - name: Invoke deployment hook
        uses: fathym/workflow-webhook@v2
        env:
          webhook_url: ${{ secrets.LCU_WEBHOOK_URL }}
          webhook_secret: ${{ secrets.LCU_WEBHOOK_SECRET }}
          data: '{ "EnterpriseLookup": "${{ secrets.LCU_ENTERPRISE_LOOKUP }}", "Username": "${{ secrets.LCU_USERNAME }}" }'
